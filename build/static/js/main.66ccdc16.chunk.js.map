{"version":3,"sources":["img/img.jpg","routes.js","components/Navigation/Navigation.js","services/constants.js","services/tv-api-service.js","pages/HomePage.js","components/NotfoundFilms/NotfoundFilms.js","components/SearchBar/SearchBar.js","pages/MoviesPage.js","components/Loader/Loader.js","components/ErrorNotification/ErrorNotification.js","components/Cast/Cast.js","components/Reviews/Reviews.js","pages/MoviesDetailsPage.js","components/App/App.js","index.js"],"names":["module","exports","routes","Object","freeze","HOME","MOVIES","MOVIE_DETAILS","MOVIE_CAST","MOVIE_REVIEWS","Navigation","className","exact","to","style","color","activeStyle","KEY","BASE_URL","fetchMovieWithQuery","searchQuery","fetch","then","res","json","data","results","fetchMovieDetails","movieId","fetchCredits","id","cast","fetchReviews","fetchTrending","HomePage","state","tvApiService","setState","catch","err","console","log","this","map","result","key","name","title","Component","NotfoundFilms","src","img","alt","SearchBar","value","onChange","e","target","onSubmit","preventDefault","props","onSearch","type","MoviesPage","setSearchQuery","history","push","location","search","query","URLSearchParams","get","prevProps","prevQuery","nextQuery","match","length","from","pathname","url","LOADER_ROOT","document","querySelector","Loader","createPortal","ErrorNotification","message","Cast","isLoading","error","getCredits","finally","movieID","params","person","cast_id","profile_path","width","character","Reviews","reviews","review","author","content","MoviesDetailsPage","fetchDetails","moveToPreviousPage","onClick","poster_path","original_title","overview","vote_average","genres","el","join","path","component","App","HomePages","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.66ccdc16.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.aef89ac2.jpg\";","const routes = Object.freeze({\n  HOME: '/',\n  MOVIES: '/movie',\n  MOVIE_DETAILS: '/movie/:movieId',\n  MOVIE_CAST: '/credits',\n  MOVIE_REVIEWS: '/reviews',\n});\n\nexport default routes;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport routes from '../../routes';\n\nconst Navigation = () => (\n  <ul className=\"list\">\n    <li className=\"navlist\">\n      <NavLink\n        exact\n        to={routes.HOME}\n        className=\"navlink\"\n        style={{ color: 'black' }}\n        activeStyle={{ color: 'red' }}\n      >\n        Home\n      </NavLink>\n    </li>\n    <li className=\"navlist\">\n      <NavLink\n        to={routes.MOVIES}\n        className=\"navlink\"\n        style={{ color: 'black' }}\n        activeStyle={{ color: 'red' }}\n      >\n        Movies\n      </NavLink>\n    </li>\n  </ul>\n);\n\nexport default Navigation;\n","const KEY = '5f7ac1b9f858cfa7079e5dbc9197589b';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst TRENDING = 'trending/all/day';\nconst QUERY_VALUE = '&query=';\nconst SEARCH = '/search';\nconst CAST_IMAGE = 'https://image.tmdb.org/t/p/w300/';\nconst FILM_IMAGE = 'https://image.tmdb.org/t/p/w500/';\n\nexport { KEY, BASE_URL, TRENDING, QUERY_VALUE, SEARCH, CAST_IMAGE, FILM_IMAGE };\n","import { KEY, BASE_URL, QUERY_VALUE, SEARCH, TRENDING } from './constants';\nimport routes from '../routes';\n\nconst fetchMovieDetails = movieId => {\n  return fetch(\n    `${BASE_URL}${routes.MOVIES}/${movieId}?api_key=${KEY}&language=en-US`,\n  ).then(res => res.json());\n};\n\nconst fetchMovieWithQuery = searchQuery => {\n  return fetch(\n    `${BASE_URL}${SEARCH}${routes.MOVIES}?api_key=${KEY}&language=en-US${QUERY_VALUE}${searchQuery}&page=1&include_adult=false`,\n  )\n    .then(res => res.json())\n    .then(data => data.results);\n};\n\nconst fetchCredits = id => {\n  return fetch(\n    `${BASE_URL}${routes.MOVIES}/${id}${routes.MOVIE_CAST}?api_key=${KEY}`,\n  )\n    .then(res => res.json())\n    .then(data => {\n      return data.cast;\n    });\n};\n\nconst fetchReviews = id => {\n  return fetch(\n    `${BASE_URL}${routes.MOVIES}/${id}${routes.MOVIE_REVIEWS}?api_key=${KEY}`,\n  )\n    .then(res => res.json())\n    .then(data => {\n      return data.results;\n    });\n};\n\nconst fetchTrending = () => {\n  return fetch(`${BASE_URL}/${TRENDING}?api_key=${KEY}`).then(res =>\n    res.json(),\n  );\n};\n\nexport default {\n  fetchMovieWithQuery,\n  fetchMovieDetails,\n  fetchCredits,\n  fetchReviews,\n  fetchTrending,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport routes from '../routes';\nimport tvApiService from '../services/tv-api-service';\n\nexport default class HomePage extends Component {\n  state = {\n    results: [],\n  };\n\n  componentDidMount() {\n    tvApiService\n      .fetchTrending()\n      .then(data => {\n        this.setState({ results: data.results });\n      })\n      .catch(err => console.log(err));\n  }\n\n  render() {\n    const { results } = this.state;\n    return (\n      <div>\n        <hr className=\"hrline\" />\n        <h1>Trending today</h1>\n        <ul>\n          {results.map(result => (\n            <li key={result.id}>\n              <Link to={`${routes.MOVIES}/${result.id}`}>\n                {result.name}\n                {result.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport img from '../../img/img.jpg';\n\nconst NotfoundFilms = () => (\n  <div>\n    <img src={img} className=\"img\" alt=\"img_not_found\" />\n  </div>\n);\n\nexport default NotfoundFilms;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class SearchBar extends Component {\n  static propTypes = {\n    onSearch: PropTypes.func.isRequired,\n  };\n\n  state = { value: '' };\n\n  onChange = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSearch(this.state.value);\n    this.setState({ value: '' });\n  };\n\n  render() {\n    const { value } = this.state;\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          value={value}\n          onChange={this.onChange}\n          className=\"input\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport tvApiService from '../services/tv-api-service';\nimport NotfoundFilms from '../components/NotfoundFilms/NotfoundFilms';\nimport SearchBar from '../components/SearchBar/SearchBar';\n\nexport default class MoviesPage extends Component {\n  static propTypes = {\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n      pathname: PropTypes.string.isRequired,\n      search: PropTypes.string.isRequired,\n      key: PropTypes.string.isRequired,\n    }).isRequired,\n    match: PropTypes.shape({\n      params: PropTypes.shape({ movieId: PropTypes.string }),\n      path: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  state = {\n    results: [],\n  };\n\n  componentDidMount() {\n    const { location } = this.props;\n    const query = new URLSearchParams(location.search).get('query');\n\n    if (!query) {\n      return;\n    }\n\n    tvApiService.fetchMovieWithQuery(query).then(results => {\n      this.setState({ results });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const { location } = this.props;\n    const prevQuery = new URLSearchParams(prevProps.location.search).get(\n      'query',\n    );\n    const nextQuery = new URLSearchParams(location.search).get('query');\n\n    if (prevQuery === nextQuery) {\n      return;\n    }\n\n    tvApiService\n      .fetchMovieWithQuery(nextQuery)\n      .then(results => {\n        this.setState({ results });\n      })\n      .catch(err => console.log(err));\n  }\n\n  setSearchQuery = searchQuery => {\n    this.props.history.push({\n      ...this.props.location,\n      search: `query=${searchQuery}`,\n    });\n  };\n\n  render() {\n    const { results } = this.state;\n    const { match } = this.props;\n    return (\n      <div>\n        <h1>Movie page</h1>\n        <SearchBar onSearch={this.setSearchQuery} />\n        {results.length <= 0 && <NotfoundFilms />}\n        <ul>\n          {results.map(result => (\n            <li key={result.id}>\n              <Link\n                to={{\n                  state: { from: 'location' },\n                  pathname: `${match.url}/${result.id}`,\n                }}\n              >\n                {result.name}\n                {result.title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { createPortal } from 'react-dom';\n\nconst LOADER_ROOT = document.querySelector('#loader-root');\n\nconst Loader = () =>\n  createPortal(\n    <div className=\"loader\">Waiting! Page is loading...</div>,\n    LOADER_ROOT,\n  );\n\nexport default Loader;\n","import React from 'react';\n\nconst ErrorNotification = message => <div>Error: {message}</div>;\n\nexport default ErrorNotification;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tvApiService from '../../services/tv-api-service';\nimport Loader from '../Loader/Loader';\nimport { FILM_IMAGE } from '../../services/constants';\nimport ErrorNotification from '../ErrorNotification/ErrorNotification';\n\nexport default class Cast extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({ movieId: PropTypes.string.isRequired }),\n      path: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  state = {\n    cast: null,\n    isLoading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n    const movieID = match.params.movieId;\n\n    this.getCredits(movieID);\n  }\n\n  getCredits = id => {\n    this.setState({ isLoading: true });\n    tvApiService\n      .fetchCredits(id)\n      .then(cast => {\n        this.setState({\n          cast,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { cast, isLoading, error } = this.state;\n    return (\n      <section className=\"cast\">\n        {error && <ErrorNotification message={error.message} />}\n        {isLoading && <Loader />}\n        <h2>Cast</h2>\n        {cast && (\n          <ul className=\"castList\">\n            {cast.map(person => (\n              <li key={person.cast_id} className=\"castListItem\">\n                <object\n                  title=\"This object has text\"\n                  data={`${FILM_IMAGE}${person.profile_path}`}\n                  type=\"image/png\"\n                  width=\"100\"\n                />\n                <p className=\"castListName\">{person.name}</p>\n                <p> Character:{person.character}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tvApiService from '../../services/tv-api-service';\nimport Loader from '../Loader/Loader';\nimport ErrorNotification from '../ErrorNotification/ErrorNotification';\n\nexport default class Reviews extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        movieId: PropTypes.string.isRequired,\n      }),\n      path: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  state = {\n    reviews: [],\n    isLoading: false,\n    error: null,\n  };\n\n  componentDidMount() {\n    const { match } = this.props;\n    const movieID = match.params.movieId;\n    this.getCredits(movieID);\n  }\n\n  getCredits = id => {\n    this.setState({ isLoading: true });\n    tvApiService\n      .fetchReviews(id)\n      .then(reviews => {\n        this.setState({\n          reviews,\n        });\n      })\n      .catch(error => {\n        this.setState({\n          error,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n  };\n\n  render() {\n    const { reviews, isLoading, error } = this.state;\n\n    return (\n      <section className=\"reviews\">\n        {error && <ErrorNotification message={error.message} />}\n        {isLoading && <Loader />}\n        <h2>Reviews</h2>\n        {reviews && (\n          <ul className=\"reviewsList\">\n            {reviews.map(review => (\n              <li key={review.id}>\n                <h3>Author: {review.author}</h3>\n                <p>`{review.content}`</p>\n              </li>\n            ))}\n          </ul>\n        )}\n        {reviews.length === 0 && <p>There are no reviews for this movie</p>}\n      </section>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport tvApiService from '../services/tv-api-service';\nimport Loader from '../components/Loader/Loader';\nimport routes from '../routes';\nimport { CAST_IMAGE } from '../services/constants';\nimport ErrorNotification from '../components/ErrorNotification/ErrorNotification';\nimport Cast from '../components/Cast/Cast';\nimport Reviews from '../components/Reviews/Reviews';\n\nexport default class MoviesDetailsPage extends Component {\n  static propTypes = {\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    location: PropTypes.shape({\n      state: PropTypes.string.isRequired,\n      pathname: PropTypes.string.isRequired,\n    }).isRequired,\n    match: PropTypes.shape({\n      params: PropTypes.shape({ movieId: PropTypes.string.isRequired }),\n      path: PropTypes.string.isRequired,\n      url: PropTypes.string.isRequired,\n    }).isRequired,\n  };\n\n  state = { result: null, isLoading: false, error: null };\n\n  componentDidMount() {\n    this.fetchDetails();\n  }\n\n  fetchDetails = () => {\n    const { movieId } = this.props.match.params;\n    this.setState({ isLoading: true });\n    tvApiService\n      .fetchMovieDetails(movieId)\n      .then(result => {\n        this.setState({ result });\n      })\n      .catch(error => {\n        this.setState({\n          error,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          isLoading: false,\n        });\n      });\n  };\n\n  // eslint-disable-next-line consistent-return\n  moveToPreviousPage = () => {\n    const { location, history } = this.props;\n    if (!location.state) {\n      return history.push(`${routes.MOVIES}`);\n    }\n\n    history.push({\n      pathname: `${routes.MOVIES}`,\n      state: { from: 'location' },\n    });\n  };\n\n  render() {\n    const { result, isLoading, error } = this.state;\n    const { match } = this.props;\n    return (\n      <section>\n        {error && <ErrorNotification message={error.message} />}\n        {isLoading && <Loader />}\n        <hr className=\"hrline\" />\n        <h2 className=\"film_title\">Movie Details</h2>\n\n        {result && (\n          <>\n            <button\n              className=\"back_button\"\n              onClick={this.moveToPreviousPage}\n              type=\"button\"\n            >\n              ← GO BACK\n            </button>\n            <div className=\"film_description\">\n              <img\n                src={`${CAST_IMAGE}${result.poster_path}`}\n                alt={result.title}\n                className=\"movie_img\"\n              />\n              <div className=\"film_details\">\n                <h1>{result.original_title}</h1>\n                <p>\n                  <b>Overview</b>\n                  <br /> {result.overview}\n                </p>\n                <p>\n                  <b>Vote average:</b> {result.vote_average * 10} %\n                </p>\n                <p>\n                  <b>Genres:</b> <br />\n                  {result.genres\n                    ? result.genres.map(el => el.name).join(', ')\n                    : 'No information about film'}\n                </p>\n              </div>\n            </div>\n            <hr className=\"hrline\" />\n            <div className=\"details_additional\">\n              <h2>Additional information</h2>\n              <ul className=\"details_list\">\n                <li>\n                  <Link to={`${match.url}/cast`}> Cast </Link>\n                </li>\n                <li>\n                  <Link to={`${match.url}/reviews`}> Reviews </Link>\n                </li>\n              </ul>\n              <hr className=\"hrline\" />\n              <Switch>\n                <Route path={`${match.path}/cast`} component={Cast} />\n                <Route path={`${match.path}/reviews`} component={Reviews} />\n              </Switch>\n            </div>\n          </>\n        )}\n      </section>\n    );\n  }\n}\n","import React from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Navigation from '../Navigation/Navigation';\r\n\r\nimport HomePages from '../../pages/HomePage';\r\nimport MoviesPage from '../../pages/MoviesPage';\r\nimport MoviesDetailsPage from '../../pages/MoviesDetailsPage';\r\nimport routes from '../../routes';\r\n\r\nconst App = () => (\r\n  <BrowserRouter>\r\n    <div className=\"App\">\r\n      <Navigation />\r\n\r\n      <Switch>\r\n        <Route exact path={routes.HOME} component={HomePages} />\r\n        <Route path={routes.MOVIE_DETAILS} component={MoviesDetailsPage} />\r\n        <Route path={routes.MOVIES} component={MoviesPage} />\r\n        <Redirect to=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  </BrowserRouter>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}